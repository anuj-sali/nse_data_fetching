# def fetch_nse_data():
#     """Fetch data from NSE API using cloudscraper with dynamic session management"""
#     try:
#         # Check if we need to create or refresh session
#         session_age_limit = 30 * 60  # 30 minutes
#         current_time = datetime.now()

#         need_new_session = (
#             not st.session_state.nse_session_established or
#             st.session_state.nse_scraper is None or
#             (st.session_state.session_creation_time and 
#              (current_time - st.session_state.session_creation_time).seconds > session_age_limit)
#         )

#         if need_new_session:
#             scraper, error = create_nse_session()
#             if error:
#                 return None, error
#         else:
#             scraper = st.session_state.nse_scraper

#         # API endpoint
#         api_url = os.getenv('NSE_OI_SPURTS_API_URL', 'https://www.nseindia.com/api/live-analysis-oi-spurts-underlyings')

#         # Updated July 2025 headers
#         headers = {
#             "authority": "www.nseindia.com",
#             "method": "GET",
#             "scheme": "https",
#             "accept": "*/*",
#             "accept-encoding": "gzip, deflate, br, zstd",
#             "accept-language": "en-US,en;q=0.9",
#             "cookie": os.getenv('NSE_COOKIE'),  # store long cookie in .env or secure source
#             "priority": "u=1, i",
#             "referer": "https://www.nseindia.com/market-data/oi-spurts",
#             "sec-ch-ua": '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
#             "sec-ch-ua-mobile": "?0",
#             "sec-ch-ua-platform": '"Windows"',
#             "sec-fetch-dest": "empty",
#             "sec-fetch-mode": "cors",
#             "sec-fetch-site": "same-origin",
#             "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
#         }

#         # Make the API request with retry and session refresh logic
#         max_retries = 3
#         for attempt in range(max_retries):
#             try:
#                 response = scraper.get(api_url, headers=headers, timeout=30, allow_redirects=True)

#                 if response.status_code == 401 and attempt == 0:
#                     scraper, refresh_error = refresh_nse_session()
#                     if refresh_error:
#                         return None, f"Session refresh failed: {refresh_error}"
#                     continue

#                 break
#             except Exception as e:
#                 if attempt == max_retries - 1:
#                     return None, f"Request failed after {max_retries} attempts: {str(e)}"
#                 time.sleep(2 ** attempt)

#         # Handle response decompression
#         content_encoding = response.headers.get("Content-Encoding", "")
#         try:
#             if "br" in content_encoding:
#                 decoded = brotli.decompress(response.content).decode("utf-8")
#             elif "gzip" in content_encoding:
#                 buf = io.BytesIO(response.content)
#                 decoded = gzip.GzipFile(fileobj=buf).read().decode("utf-8")
#             else:
#                 decoded = response.text
#         except Exception as decomp_error:
#             try:
#                 decoded = response.text
#             except Exception:
#                 return None, f"Decompression failed: {str(decomp_error)}"

#         if response.status_code == 200:
#             data = json.loads(decoded)
#             return data, None
#         else:
#             return None, f"HTTP Error: {response.status_code}"

#     except Exception as e:
#         return None, str(e)

# def fetch_nse_data():
#     """Fetch data from NSE API using cloudscraper"""
#     try:
#         # Create scraper with better configuration
#         scraper = cloudscraper.create_scraper(
#             browser={
#                 'browser': 'chrome',
#                 'platform': 'windows',
#                 'mobile': False
#             }
#         )
        
#         url = "https://www.nseindia.com/api/live-analysis-oi-spurts-underlyings"
        
#         headers = {
#             "authority": "www.nseindia.com",
#             "method": "GET",
#             "scheme": "https",
#             "accept": "*/*",
#             "accept-encoding": "gzip, deflate, br, zstd",
#             "accept-language": "en-US,en;q=0.9",
#             "cookie": os.getenv('NSE_COOKIE'),  # store long cookie in .env or secure source
#             "priority": "u=1, i",
#             "referer": "https://www.nseindia.com/market-data/oi-spurts",
#             "sec-ch-ua": '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
#             "sec-ch-ua-mobile": "?0",
#             "sec-ch-ua-platform": '"Windows"',
#             "sec-fetch-dest": "empty",
#             "sec-fetch-mode": "cors",
#             "sec-fetch-site": "same-origin",
#             "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36"
#         }
        
#         # Add timeout and session handling
#         response = scraper.get(url, headers=headers, timeout=30, allow_redirects=True)
        
#         # Decompression logic with better error handling
#         content_encoding = response.headers.get("Content-Encoding", "")
        
#         try:
#             if "br" in content_encoding:
#                 decoded = brotli.decompress(response.content).decode("utf-8")
#             elif "gzip" in content_encoding:
#                 buf = io.BytesIO(response.content)
#                 decoded = gzip.GzipFile(fileobj=buf).read().decode("utf-8")
#             else:
#                 decoded = response.text
#         except Exception as decomp_error:
#             # Fallback: try to use response.text directly
#             try:
#                 decoded = response.text
#             except Exception:
#                 return None, f"Decompression failed: {str(decomp_error)}"
        
#         if response.status_code == 200:
#             data = json.loads(decoded)
#             return data, None
#         else:
#             return None, f"HTTP Error: {response.status_code}"
            
#     except Exception as e:
#         return None, str(e)